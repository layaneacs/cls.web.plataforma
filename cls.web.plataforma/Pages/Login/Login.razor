@page "/login"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims
@using cls.web.plataforma.Constants
@using cls.web.plataforma.Data.Interface
@using cls.web.plataforma.Data.Service
@using cls.web.plataforma.Model;

@inject IAuthService _service;
@inject NavigationManager _navigation;
@inject ISessionContext _session;

<PageTitle>Login</PageTitle>

<div class="card text-center">
    <div class="card-header">
        <span>Login</span>
    </div>
    <br>
    <EditForm Model="@pessoa">
        <div class="form-group row p-2">
            <div class="col-md-4 offset-md-4">
                <input type="text" class="form-control" placeholder="Email" @bind-value="pessoa.UserAccount" />
            </div>
        </div>
        <br>
        <div class="form-group row p-2">
            <div class="col-md-4 offset-md-4">
                <input type="password" class="form-control" placeholder="Senha" @bind-value="pessoa.UserPsw" />
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="col-md-4 offset-md-4">
                <p style="color: red; font-weight: 700;">@_loginFeedback</p>
            </div>
        </div>
        <div class="form-group row p-2">
            <div class="text-center">
                <button class="btn btn-primary" @onclick="@(async () => await Send())">
                    <span class=@spinner role="status" aria-hidden="true"></span>
                    <span class="sr-only">Entrar</span>
                </button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private UserLogin pessoa = new();
    private string? _loginFeedback;
    private string spinner = string.Empty;

    protected override async Task OnInitializedAsync()
    {
    }

    private async Task Send()
    {
        spinner = ClassesHtml.SPINNER_BORDER_SM;

        var result = await _service.Login(pessoa.UserAccount, pessoa.UserPsw);
        if(result.IsSucess && !string.IsNullOrEmpty(result.Data?.data?.token)) 
        { 
            await _session.Set(result.Data.data.token);
            _navigation.NavigateTo("/");
        }

        _loginFeedback = result.Message;
        spinner = string.Empty;
        pessoa = new();
    }
}

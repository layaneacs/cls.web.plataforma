@page "/eventos"

<PageTitle>Próximos eventos</PageTitle>

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Globalization
@using cls.web.plataforma.Data
@using cls.web.plataforma.Data.Interface;
@using cls.web.plataforma.Data.Service
@using cls.web.plataforma.Model
@using cls.web.plataforma.Model.Calendar
@using cls.web.plataforma.Shared.Components;
@using cls.web.plataforma.Model.Components;

@inject ICalendarService _calendarService
@inject NavigationManager _navigation;
@inject ISessionContext _session;


<h1>Eventos</h1>

@if (calendars == null)
{
    <Loading Message="Carregando lista de eventos..." />
}
else
{
<div class="grid gap-0 row-gap-3 text-center main">
    @foreach (var calendar in calendars)
    {
    <div class="card event" style="margin-bottom: 25px; box-shadow: 2px 2px 1px lightblue" > 
        <div class="card-body ">
             <div class="row align-items-center">
                <div class="col">
                            @calendar.calendarDate.ToString("dddd, dd MMMM yyyy H:mm")
                </div>
                <div class="col-6">
                    <div class = "row title">
                        <div class="col">
                            @calendar.title
                        </div>                    
                    </div>
                    <div class = "row description">
                        <div class="col">
                            @calendar.description
                        </div>
                    </div>
                </div>
                <div class="col">
                    Disponíveis @calendar.available / @calendar.total
                </div>
            </div>
        </div> 
    </div>         
    }

</div>

}

@code {
    private CalendarModel[]? calendars;
    private ModalConfirmation? _modalConfirmation;
    private ModalEntity _deleteModal { get; set; } = new()
        {
            Titulo = "Excluir",
            Descricao = "Tem certeza que deseja remover esse evento?"
        };

    protected override async Task OnInitializedAsync()
    {
        var userSession = "anonimo";

        if (!string.IsNullOrWhiteSpace(userSession))
        {
            calendars = await _calendarService.Get();
        }
        else
        {
            _navigation.NavigateTo("/login");
        }
    }

/*
    private Task Delete(int id)
    {
        //await _calendarService.Delete(id);
        //calendars = await _calendarService.Get();
    }
    */
}